version: '3.6'

x-base: &base
  deploy: &base-deploy
    placement:
      constraints:
        - node.role == worker
      preferences:
        - spread: node.labels.os
        - spread: node.labels.availability_zone
    resources:
      limits:
        cpus: '1'
        memory: 500M
      reservations:
        memory: 500M
    update_config:
      order: start-first
  hostname: '{{ .Service.Name }}-{{ .Task.Slot }}'
  networks:
    - overlay

x-project: &project
  << : *base
  environment: &project-environment
    APM: ${APM:-newrelic}
    DOTENV: ${DOTENV:-develop}
    SITE_DOMAIN: ${SITE_DOMAIN:-project_template.lvh.me}
    TRANSCRYPT_PASSWORD:
  image: interaction/project_template:${IMAGE_TAG:-local}
  networks:
    # - elasticsearch
    - overlay
    # - postgres
  volumes:
    - media-root:/opt/project_template/var/media_root
    - static-cache:/opt/project_template/static_root/CACHE
    - var:/opt/project_template/var

networks:
  # elasticsearch:
  #   external: true
  haproxy:
    external: true
  overlay:
    attachable: true
  # postgres:
  #   external: true

services:
  celery:
    << : *project
    command: setup.sh celery.sh --concurrency 2
    deploy:
      << : *base-deploy
      replicas: ${CELERY_REPLICAS:-1}
    healthcheck:
      test: entrypoint.sh celery inspect ping --app=ixc_django_docker.celery -d celery@$$HOSTNAME || exit 1

  celerybeat:
    << : *project
    command: setup.sh celerybeat.sh
    healthcheck:
      test: pgrep -f 'celery beat'

  celeryflower:
    << : *project
    command: setup.sh celeryflower.sh
    environment:
      << : *project-environment
      SERVICE_PORTS: 8080
      VIRTUAL_HOST: https://flower.${SITE_DOMAIN:-project_template.lvh.me}
      VIRTUAL_HOST_WEIGHT: 1
    healthcheck:
      test: dockerize -wait tcp://localhost:8080 || exit 1
    networks:
      # - elasticsearch
      - haproxy
      - overlay
      # - postgres

  # elasticsearch:
  #   << : *base
  #   deploy:
  #     << : *base-deploy
  #     replicas: ${ELASTICSEARCH_REPLICAS:-1}
  #   environment:
  #     ES_JAVA_OPTS: ${ES_JAVA_OPTS:-'-Xms400m -Xmx400m'}
  #   image: interaction/elasticsearch-icu:5-alpine
  #   volumes:
  #     - data:/usr/share/elasticsearch/data

  gunicorn:
    << : *project
    command: setup.sh supervisor.sh
    deploy:
      << : *base-deploy
      replicas: ${GUNICORN_REPLICAS:-1}
    environment:
      << : *project-environment
      GUNICORN_WORKERS: 2
      SERVICE_PORTS: 8000
      VIRTUAL_HOST: https://*${SITE_DOMAIN:-project_template.lvh.me}
    healthcheck:
      test: dockerize -wait tcp://localhost:8000 -wait tcp://localhost:8080 || exit 1
    networks:
      # - elasticsearch
      - haproxy
      - overlay
      # - postgres

  # postgres:
  #   << : *base
  #   deploy:
  #     << : *base-deploy
  #     replicas: ${POSTGRES_REPLICAS:-1}
  #   environment:
  #     PGDATA: /var/lib/postgresql/data/pgdata  # Store data in subdirectory of volume mount point, per PostgreSQL recommendations
  #   healthcheck:
  #     test: pg_isready || exit 1
  #   image: postgres:9.5-alpine
  #   volumes:
  #     - data:/var/lib/postgresql/data

  redis: &redis
    << : *base
    command: --maxmemory 400M --maxmemory-policy volatile-lru
    healthcheck:
      test: redis-cli ping || exit 1
    image: redis:3-alpine
    volumes:
      - data:/data

  setup:
    << : *project
    command: setup.sh
    deploy:
      << : *base-deploy
      restart_policy:
        condition: on-failure
      update_config:
        order: stop-first

  shell:
    << : *project
    command: bash.sh
    deploy:
      << : *base-deploy
      replicas: 0
    ports:
      - 8000

volumes:
  data:
    driver: cloudstor:aws
    driver_opts:
      perfmode: maxio
    name: '{{ .Service.Name }}-{{ .Task.Slot }}-data'

  media-root:
    driver: cloudstor:aws
    driver_opts:
      perfmode: maxio
    name: project_template-${DOTENV:-develop}-media-root

  static-cache:
    driver: cloudstor:aws
    driver_opts:
      perfmode: maxio
    name: project_template-${DOTENV:-develop}-static-cache

  var:
    driver: cloudstor:aws
    driver_opts:
      perfmode: maxio
    name: '{{ .Service.Name }}-{{ .Task.Slot }}-var'

# APM=
# CELERY_REPLICAS=
# DOTENV=
# ELASTICSEARCH_REPLICAS=
# GUNICORN_REPLICAS=
# IMAGE_TAG=
# POSTGRES_REPLICAS=
# SITE_DOMAIN=
# TRANSCRYPT_PASSWORD=
